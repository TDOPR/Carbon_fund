<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.summer.mapper.AppDonaUsersMapper">

    <insert id="insertBatchNoticeByUserId">
        insert into news_user(newsId, userId)
        select id,
               #{userId}
        from news
        where type = 2
    </insert>

    <select id="findInviteIdByUserId" resultType="java.lang.Integer">
        select inviteId
        from app_users
        where id = #{userId}
    </select>

    <select id="allDonaUsers" resultType="com.summer.model.dto.AllDonaUsersDTO">
        select z.nickName, z.rechargeUsdtAmount, z.level, y.title
        from (select a.nickName,
                     a.level,
                     b.rechargeUsdtAmount
              from app_dona_users a
                       left join
                   dona_users_wallets b
                   on a.id = b.userId
              where a.level > 0) z
                 left join medal y
                           on z.level = y.id
    </select>

    <select id="selectUsers" resultType="com.summer.model.dto.AllDonaUsersDTO">
        select a.nickName,
               a.level,
               b.donaUsdtAmount
        from app_dona_users a
                 left join
             dona_users_wallets b
             on a.id = b.user_id
        where a.level > 0
          AND a.nickName = #{nickName}
    </select>

    <select id="integralUsersRanking" resultType="com.summer.model.dto.AllIntegralUsersDTO">
        select a.nickName,
               b.userIntegralAmount,
               a.level
        from app_dona_users a
                 left join
             dona_users_wallets b
             on a.id = b.userId
        order by b.userIntegralAmount desc
    </select>

    <select id="myIntegralRank" resultType="com.summer.model.dto.AllIntegralUsersDTO">
        --         SET
--         <![CDATA[
--         @rank = 0;
--             ]]>
        <![CDATA[
--         SET
--         @rank = 0;
        SELECT @rank := @rank + 1 AS rank,]]>
         id, level, nickName, userIntegralAmount, donaUsdtAmount, rechargeUsdtAmount
        FROM
            (SELECT a.id, a.level, a.nickName, b.userIntegralAmount, b.donaUsdtAmount, b.rechargeUsdtAmount FROM
            app_dona_users a
            left join
            dona_users_wallets b
            on a.id = b.userId ORDER BY
            b.userIntegralAmount desc
            ) ranked_students, (SELECT @rank := 0) r
        where id = #{userId};

    </select>

    <select id="myIntegral" resultType="com.summer.model.dto.AllIntegralUsersDTO">
        select a.nickName,
               b.userIntegralAmount
        from app_dona_users a
                 left join
             dona_users_wallets b
             on a.id = b.userId
        WHERE a.email = #{email}
        order by b.userIntegralAmount
    </select>

    <select id="getUserInfo" resultType="com.summer.model.dto.HomeUserInfoDTO">
        SELECT z.level,
               z.userIntegralAmount,
               z.walletAmount,
               z.inviteCode,
               y.title,
               y.imgUrl
        from (select a.level,
                     b.userIntegralAmount,
                     b.walletAmount,
                     c.userAddress,
                     c.inviteCode
              from app_dona_users a
                       left join
                   dona_users_wallets b
                   on a.id = b.userId
                       left join app_users c
                                 on a.email = c.email
              WHERE a.id = #{userId}
                and c.email = #{email}) z
                 LEFT JOIN medal y
                           on z.level = y.id
    </select>

    <select id="integralRankingSelect" resultType="com.summer.model.dto.AllIntegralUsersDTO">
        select a.nickName,
               b.userIntegralAmount
        from app_dona_users a
                 left join
             dona_users_wallets b
             on a.id = b.userId
        where 1 = 1
          AND a.nickName = #{nickName}
    </select>

    <select id="getMyTeamInfo" resultType="com.summer.model.vo.MyMemberInfoVO">
        select a.id level, i.q value, a.title
        from medal a left join (
            select x.level, count (*) q
            from (select a.user userid, b.email email
            from (select a.id id,
            b.descendant user
            from app_users a
            left join
            tree_paths b
            on a.id = b.ancestor
            where b.level > 0
            and a.id = #{userId}) a
            LEFT JOIN
            app_users b
            on
            a.user = b.id) z
            left join
            app_dona_users x
            on
            z.email = x.email
            where x.level is NOT null
            GROUP BY x.level
            ) i
        on a.id = i.level
    </select>

    <select id="rechargeRecord" resultType="com.summer.model.dto.AllIntegralUsersDTO">
        select a.nickName,
               b.userIntegralAmount
        from app_dona_users a
                 left join
             dona_users_wallets b
             on a.id = b.userId
        where 1 = 1
          AND a.nickName = #{nickName}
    </select>

    <select id="getMyDirectPushVO" resultType="com.summer.model.vo.MyDirectPushVO">
        select z.address, x.level
        from (select a.user u, b.email email, b.userAddress address
              from (select a.id id,
                           b.descendant user
                    from app_users a
                        left join
                        tree_paths b
                    on a.id = b.ancestor

                    where b.level
                        > 0
                      and a.id = #{userId}) a
                       LEFT JOIN
                   app_users b
                   on
                       a.user = b.id) z
                 left join
             app_dona_users x
             on
                 z.email = x.email
        where x.level is NOT null
    </select>

    <select id="findAllUsers" resultType="com.summer.model.AppDonaUsers">
        select a.amount rechargeAmount,
               a.level  level,
               a.userId userId
        from app_dona_users a
        where a.superNode = false;
    </select>

    <select id="selectDonaUserIdByUserAddress" resultType="java.lang.Integer">
        select y.id
        from (select a.id, a.email from app_users a where a.userAddress = #{userAddress}) z
                 left join app_dona_users y
                           on z.email = y.email
    </select>

    <select id="allUsersRechargeAmount" resultType="java.math.BigDecimal">
        select sum(a.amount)
        from app_dona_users a
        where 1 = 1
    </select>

    <select id="selectUserIdByEmail" resultType="java.lang.Integer">
        select a.id
        from app_dona_users a
        where a.email = #{email}
    </select>

    <select id="page" resultType="com.summer.model.vo.AppUsersVO"
            parameterType="com.summer.model.condition.AppUsersCondition">
        select
        u.id,u.email,u.nickName,u.enabled,u.vipLevel,u.mobile,u.headImage,u.inviteCode, u.level,u.createTime,u.inviteId
        parentId,u.proxyRole,u.valid,
        tmp.recharge,tmp2.withdraw,tmp3.consume,w.walletAmount ttt,w.usdWalletAmount usd
        from
        app_users u
        left join
        wallets w
        on w.userId=u.id
        left join
        (select userId, sum(amount) recharge from wallet_usd_logs where type=1 GROUP BY userId ) tmp
        on tmp.userId=u.id
        left join
        (select userId, sum(amount) withdraw from wallet_usd_logs where type=2 and status=0 group by userId ) tmp2
        ON tmp2.userId=u.id
        left join
        (select userId, sum(amount) consume from wallet_usd_logs where type in(3,4) GROUP BY userId ) tmp3
        on tmp3.userId=u.id
        <if test="param.proxy">
            left join
            tree_paths t
            on u.id = t.descendant
        </if>
        where
        1=1
        <if test="param.proxyUserId!=null">
            and t.ancestor=#{param.proxyUserId}
            and t.level>0
        </if>
        <if test="param.email!=null and param.email!=''">
            and u.email like CONCAT('%',#{param.email},'%')
        </if>
        <if test="param.id!=null">
            and u.id=#{param.id}
        </if>
        <if test="param.valid!=null">
            and u.valid= #{param.valid}
        </if>
        <if test="param.level!=null">
            and u.level= #{param.level}
        </if>
        <if test="param.vipLevel!=null">
            and u.vipLevel= #{param.vipLevel}
        </if>
        <if test="param.proxyRole!=null">
            and u.proxyRole= #{param.proxyRole}
        </if>
        <if test="param.beginDate!=null">
            and u.createTime <![CDATA[ >= ]]> #{param.beginDate}
        </if>
        <if test="param.endDate!=null">
            and u.createTime <![CDATA[ <= ]]> #{param.endDate}
        </if>
        order by
        u.createTime desc
    </select>

    <select id="getValidUserCountByInviteId" resultType="java.lang.Integer">
        select count(1)
        from app_users
        where inviteId = #{userId}
          and valid = 1
    </select>

    <select id="selectUserCountGroupByLevel" resultType="com.summer.model.dto.AppUserCountDTO">
        select level,
               count(1) count
        from
            app_users
        where
            level
            >0
        group by
            level
    </select>

    <select id="selectUserCountGroupByLevelParentId" resultType="com.summer.model.dto.AppUserCountDTO">
        select u.level,
               count(u.id) count
        from
            app_users u
            left join
            tree_paths t
        ON u.id = t.descendant
        where
            t.ancestor=#{userId}
          and u.level
            >0
          and t.level
            >0
        group by
            u.level
    </select>

    <select id="getParentEmail" resultType="java.lang.String">
        select email
        from app_users
        where id = (select inviteId from app_users where id = #{userId})
    </select>

    <select id="getChildList" resultType="java.lang.String">
        select email
        from app_users
        where inviteId = #{userId}
    </select>

</mapper>